AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Sample SAM Template for serverless-cms-dotnet
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON

# Parameters:
# CognitoUserEmail:
#   Description: Email address of the created user
#   Type: String
# APIStageName:
#   Default: api
#   Description: StageName of API Gateway deployment
#   Type: String

Resources:
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: Serverless CMS Authentication Client
      GenerateSecret: true
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - http://localhost:3000/api/auth/callback/cognito
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - profile
        - openid
      AllowedOAuthFlowsUserPoolClient: true
      PreventUserExistenceErrors: ENABLED
      EnableTokenRevocation: true
      EnablePropagateAdditionalUserContextData: false
      AuthSessionValidity: 3

  # UserPoolUser:
  #   Type: AWS::Cognito::UserPoolUser
  #   Properties:
  #     DesiredDeliveryMediums:
  #       - EMAIL
  #     Username: !Ref CognitoUserEmail
  #     UserPoolId: !Ref UserPool

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: serverless-cms-user-pool
      UserPoolId: !Ref UserPool

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Severless CMS User Pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      MfaConfiguration: 'OFF'
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      UsernameConfiguration:
        CaseSensitive: false

  # AccessLogGroup:
  #   Type: AWS::Logs::LogGroup

  MyAPIGateway:
    DependsOn: UserPool
    Type: AWS::Serverless::Api
    Properties:
      Name: Get Groups API Gateway
      StageName: Staging
      BinaryMediaTypes:
      - '*/*'
      Cors:
        AllowMethods: '''GET,POST,OPTIONS'''
        AllowHeaders: '''Content-Type,Authorization'''
        AllowOrigin: '''*'''
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      AccessLogSetting:
        # DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency}'

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/HelloWorld/
      Handler: HelloWorld::HelloWorld.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Events:
        HelloWorldApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /hello
            Method: GET

  CreateTableFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/CreateTable/
      Handler: CreateTable::CreateTable.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Timeout: 120
      Role: null
      Policies:
        - Statement:
            - Sid: DynamoDBFullAccess
              Effect: Allow
              Action:
                - dynamodb:*
              Resource: '*'
      Events:
        CreateTableApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /create-table
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  GenPresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/GenPresignedUrl/
      Handler: GenPresignedUrl::GenPresignedUrl.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Timeout: 120
      Events:
        GenPresignedUrlApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /gen-presigned-url
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  GetBucketItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/GetBucketItem/
      Handler: GetBucketItem::GetBucketItem.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Role: null
      Timeout: 120
      Events:
        GetBucketItemApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /get-bucket-item
            Method: GET
            # Auth:
            #   Authorizer: CognitoAuthorizer

  GetGroupsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/GetGroups/
      Handler: GetGroups::GetGroups.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Role: null
      Timeout: 120
      Policies:
        - Statement:
            - Sid: DynamoDBFullAccess
              Effect: Allow
              Action:
                - dynamodb:*
              Resource: '*'
      Events:
        GetGroupsApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /get-groups
            Method: GET
            # Auth:
            #   Authorizer: CognitoAuthorizer

  GetGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/GetGroup/
      Handler: GetGroup::GetGroup.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Role: null
      Timeout: 120
      Policies:
        - Statement:
            - Sid: DynamoDBFullAccess
              Effect: Allow
              Action:
                - dynamodb:*
              Resource: '*'
      Events:
        GetGroupsApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /get-group
            Method: GET
            # Auth:
            #   Authorizer: CognitoAuthorizer

  GetPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/GetPost/
      Handler: GetPost::GetPost.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Role: null
      Timeout: 120
      Policies:
        - Statement:
            - Sid: DynamoDBFullAccess
              Effect: Allow
              Action:
                - dynamodb:*
              Resource: '*'
      Events:
        GetPostApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /get-post
            Method: GET
            # Auth:
            #   Authorizer: CognitoAuthorizer

  GetPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/GetPosts/
      Handler: GetPosts::GetPosts.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Role: null
      Timeout: 120
      Policies:
        - Statement:
            - Sid: DynamoDBFullAccess
              Effect: Allow
              Action:
                - dynamodb:*
              Resource: '*'
      Events:
        GetPostsApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /get-posts
            Method: GET
            # Auth:
            #   Authorizer: CognitoAuthorizer


  FetchTableContentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/FetchTableContent/
      Handler: FetchTableContent::FetchTableContent.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Role: null
      Timeout: 120
      Policies:
        - Statement:
            - Sid: DynamoDBFullAccess
              Effect: Allow
              Action:
                - dynamodb:*
              Resource: '*'
      Events:
        FetchTableContentApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /fetch-table-content
            Method: GET
            # Auth:
            #   Authorizer: CognitoAuthorizer

  AddGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/AddGroup/
      Handler: AddGroup::AddGroup.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Role: null
      Timeout: 120
      Policies:
        - Statement:
            - Sid: DynamoDBFullAccess
              Effect: Allow
              Action:
                - dynamodb:*
              Resource: '*'
      Events:
        AddGroupApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /add-group
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  AddPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/AddPost/
      Handler: AddPost::AddPost.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Role: null
      Timeout: 120
      Policies:
        - Statement:
            - Sid: DynamoDBFullAccess
              Effect: Allow
              Action:
                - dynamodb:*
              Resource: '*'
      Events:
        AddPostApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /add-post
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/UpdateGroup/
      Handler: UpdateGroup::UpdateGroup.Function::FunctionHandler
      Runtime: dotnet8
      MemorySize: 1024
      Architectures:
        - x86_64
      Role: null
      Timeout: 120
      Policies:
        - Statement:
            - Sid: DynamoDBFullAccess
              Effect: Allow
              Action:
                - dynamodb:*
              Resource: '*'
      Events:
        AddGroupApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /update-group
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  UpdatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/UpdatePost/
      Handler: UpdatePost::UpdatePost.Function::FunctionHandler
      Runtime: dotnet8
      Architectures:
        - x86_64
      Role: null
      Timeout: 120
      Policies:
        - Statement:
            - Sid: DynamoDBFullAccess
              Effect: Allow
              Action:
                - dynamodb:*
              Resource: '*'
      Events:
        UpdatePostApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPIGateway
            Path: /update-post
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  readingListDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: readingList
      AttributeDefinitions:
        - AttributeName: ItemId
          AttributeType: S
        - AttributeName: Title
          AttributeType: S
      KeySchema:
        - AttributeName: ItemId
          KeyType: HASH
        - AttributeName: Title
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'

  postDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: postList
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      GlobalSecondaryIndexes:
        - IndexName: myGSI
          KeySchema:
            - AttributeName: SK
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - data
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: serverless-cms-bucket
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
            AllowedOrigins:
              - '*'